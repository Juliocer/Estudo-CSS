/*Seletores
 1. Seletores de Tag/Tipo
 2. Seletores de Id > #tipo{}
 3. Seletores de Classes > .tipo{}
 4. Seletores de Universal > *{}
 5. Seletores de Atributo: 
    [Atributo]{} em conjunto com o valor [Atributo="valor"]{}
    [Atributo~="valor"]{} se tiver mas de uma valor dentro coloca ~ que vc seta.
    [Atributo*="valor1"]{} procura valor especifico dentro do valor.

    Selecionar mais de um seletor
        vc colca um ( , ) para separa. Exemplo:
        h1, .texto, #link-referencia{ color: blue }

    Selecionando de uma fomato pai e finho, conbinador desedente.
        vc coloca ele todo junto Exemplo:
        p.texto{} neste exemplo o pai e tag p e finho e .texto e edita o finho.

Combinadores: relação entre dois seletores.

 1. Combinador desendente (espaço) Elemento dentro de outro: div p
 2. Combinador filho (>) Filho direto: div > p
 3. Combinador irmão adjacente (+) Irmão ao lado imediato: h1 + p
 4. Combinador irmão em Geral (~) Todos os irmãos seguintes: h1 ~ p
 
 Estrutura:
 [SELETOR] [COMBINADOR] [SELETOR]
*/

/*Largura e Altura
    width > Largura
    Height > Altura

    width:auto > ele aumenta a largura de acordo com o conteudo dentro da tag.
    width:initial > ele aplica o valor padrão da tag.
    width:inherit > ele vai aplicar a largura do tag pai. 

    max-width:200px > ele informa a largura maxima que le pode creser
    min-width:200px > ele aplica o valor minimo que ele pode creser


*/

/*Margin 

margin: 20px;
Margin ele coloca uma distancia da linha da tag para fora. Vc pode trabalhar com valores negativos. 

margin: auto > ele sentraliza a tag no centro da tela.

margin: 10px 10px 10px 10px:
    o primeiro valor parte de cima.
    segundo valor para a esquerda
    terceiro valor para baicho 
    quarto valor para a esquerda    
    
vc conseque colocar margins para direção especifica.
    margin-top: ; 
    margin-right: ;
    margin-bottom: ;
    margin-left: ;
*/

/*Padding

padding:10px;
Ele coloca uma distancia da linha da tag para dentro. Vc pode usar numero negativo.

padding: 10px 10px 10px 10px:
    o primeiro valor parte de cima.
    segundo valor para a esquerda
    terceiro valor para baicho.
    quarto valor para a esquerda.    
    
vc conseque colocar padding para direção especifica.
    padding-top:10px ; 
    padding-right:10px ;
    padding-bottom:10px ;
    padding-left:10px ;
*/

/*Box-sizing

box-sizing: border-box;

Quando vc coloca um Margin e Padding ele soma a o valor que vc colocou na margin com o tamanho do tag
o Box-sizing inpedi que ele expando a tag e implemente os valores que vc colocou na margin e padding dentro do valor da tag
sem inspandila.

*/

/*Cores
    RGB E RGBA
    RGB RED 0 >= 255, GREEN 0 >= 255, BLUE 0 >= 255.
    RGB RED 0 >= 255, GREEN 0 >= 255, BLUE 0 >= 255, ALPHA 0 >= 255 E ATRANSPARENCIA

    Hexadecimal
    A >= F
    00 >= 255
    #RED 0 >= 255, GREEN 0 >= 255, BLUE 0 >= 255, 10% >= Transparencia.

    HSL E HSLA
    H(matriz), S(saturação), L(luminação);
    color: hsl(0,100%,30%);
    H(matriz), S(saturação), L(luminação), A(Iluminação)
    color: hsla(0,100%,30%, 0.6);
*/

/*Imagen object-fit e object-position

A propriedade object-fit define como o conteúdo de uma <img> (ou <video>,
 <iframe>, etc.) se ajusta dentro do container (geralmente uma <div>).
    object-fit:: -> O que faz.
    object-fit: contain; -> A imagem é inteira visível dentro do container, mantendo a proporção. Pode sobrar espaço em volta.
    object-fit: cover; -> A imagem preenche todo o container, mantendo a proporção. Pode cortar partes da imagem.
    object-fit: none; -> A imagem mantém seu tamanho original, mesmo que ultrapasse o container.
    object-fit: scale-down -> 	A imagem será reduzida proporcionalmente se for maior que o container, caso contrário, se comporta como none.

A propriedade Object-position define a posição do conteúdo dentro do elemento 
(geralmente <img>) quando o object-fit não preenche perfeitamente o container.

Funciona principalmente com:
    object-fit: cover
    object-fit: none
    object-fit: scale-down
    (em contain, o efeito é mais sutil)

📌 Valores Comuns de object-position:
    ✅ center (padrão)
    object-position: center;
        A imagem fica centralizada (horizontal e verticalmente).
        Valor padrão se você não definir nada.

    ✅ top, bottom, left, right
    object-position: top;
    object-position: bottom;
    object-position: left;
    object-position: right;

        top: alinha o topo da imagem com o topo do container.
        bottom: alinha a base da imagem com a base do container.
        left: alinha a esquerda da imagem com a esquerda do container.
        right: alinha a direita da imagem com a direita do container.

🔁 Combinações:
    ✅ top right
    object-position: top right;
        Alinha a imagem no canto superior direito do container.

    ✅ bottom left
    object-position: bottom left;
        Alinha a imagem no canto inferior esquerdo.

🎯 Com Porcentagem ou Pixels:
    ✅ object-position: 30% 70%;
    object-position: 30% 70%;
        O primeiro valor (30%) move a imagem da esquerda para a direita (horizontal).
        O segundo valor (70%) move de cima para baixo (vertical).
        Isso significa que a imagem vai aparecer mais deslocada para a direita e parte inferior do container.


    div{
        width: 200px;
        height: 300px;
        border: 5px solid blue;
    }
    
    img{
        width: 100%;
        height: 100%;
    }
    
    #contain{
        object-fit: contain;
    }
    
    #cover{
        object-fit: cover;
    }
    
    #none{
        object-fit: none;
    }
    
    #scale-dow{
        object-fit: scale-down;
    }
    
    */

/* background-image, background-size, background-repeat
🎯 A propriedade background-image permite definir uma imagem ou gradiente como plano de fundo de um elemento HTML, como uma <div>, <section>, <body>, etc.
    
✅ 1. background-image: url(); -> Imagem de fundo
✅ 2. background-image: linear-gradient(lightpink, palevioletred, purple); -> Gradiente linear (de cima para baixo)
✅ 3. background-image: radial-gradient(lightpink, palevioletred, purple); -> Gradiente radial (do centro para as bordas)
✅ 4. background-image: repeating-linear-gradient(to top, palevioletred 0 20px, lightpink 20px 40px); -> Gradiente linear repetido (efeito de faixa/zebra)
    
    ✅ 1. Imagem de fundo
    background-image: url('../img/nave_considero_realista.jpg');
    Exibe uma imagem como fundo do elemento.
    O caminho (../img/...) depende da estrutura da sua pasta.
    Pode usar também imagens da internet:
    background-image: url('https://exemplo.com/imagem.jpg');
    
    
    ✅ 2. Gradiente linear (de cima para baixo)
    background-image: linear-gradient(lightpink, palevioletred, purple);
    Cria uma transição de cores linear.
    Neste exemplo: a cor vai de lightpink no topo até purple na base.
    Pode mudar a direção:
    linear-gradient(to right, red, yellow);
    
    
    ✅ 3. Gradiente radial (do centro para as bordas)
    background-image: radial-gradient(lightpink, palevioletred, purple);
    As cores começam no centro e vão até as bordas, como círculos concêntricos.
    Pode controlar o formato:
    radial-gradient(circle at top left, red, blue);
    
    ✅ 4. Gradiente linear repetido (efeito de faixa/zebra)
    background-image: repeating-linear-gradient(to top, palevioletred 0 20px, lightpink 20px 40px);
    Cria um padrão repetido com faixas de cor.
    Aqui:
    palevioletred vai de 0 a 20px
    lightpink de 20px a 40px
    Depois o padrão se repete até preencher todo o fundo
    Pode trocar a direção:
    to right, to left, 45deg, etc.
    
    
🎯 Usado junto com background-image, o background-size controla o tamanho da imagem de fundo no elemento.
    
    ✅ 1. background-size: cover; 
    ✅ 2. background-size: contain;
    ✅ 3. background-size: 100px;
    ✅ 4. background-size: 100px 100%;

    ✅ 1. background-size: cover;
    A imagem cobre todo o elemento, mantendo a proporção.
    Pode cortar partes da imagem para preencher tudo.
    Muito usado em banners e fotos de capa.
    
    ✅ 2. background-size: contain;
    A imagem se ajusta inteira dentro do elemento, sem cortes.
    Mantém a proporção, então pode sobrar espaço (como margens) se a imagem e o container não tiverem a mesma proporção.
    
    ✅ 3. background-size: 100px;
    Define apenas a largura da imagem (100px), e a altura é ajustada automaticamente proporcionalmente.
    Equivalente a:
        background-size: 100px auto;
    
    ✅ 4. background-size: 100px 100%;
    Define largura: 100px e altura: 100% do elemento.
    A imagem será esticada ou encolhida sem manter a proporção.

🎯 O que é background-repeat?

    ✅ 1. background-repeat: no-repeat round;
    ✅ 2. background-repeat: repeat-x;
    ✅ 3. background-repeat: repeat-y;
    ✅ 4. background-repeat: space;
    ✅ 5. background-repeat: round;
    ✅ 6. background-repeat: no-repeat;

    ✅ Tabela comparativa:
    Valor	    Efeito
    no-repeat	Mostra a imagem apenas uma vez
    repeat-x	Repete somente na horizontal
    repeat-y	Repete somente na vertical
    repeat      Repete a imagem nos dois eixos (x e y)
    space	    Repete com espaços iguais entre as imagens
    round	    Redimensiona a imagem para encaixar certinho

    ✅ 2. background-repeat: repeat-x;
    Repete a imagem somente no eixo horizontal (x).
    Na vertical, a imagem aparece uma única vez.
    📌 Ideal para barras de topo ou efeitos horizontais que precisam se repetir.

    ✅ 3. background-repeat: repeat-y;
    Repete a imagem somente no eixo vertical (y).
    Na horizontal, aparece uma vez só.
    📌 Usado para criar colunas visuais ou listras verticais.
    
    ✅ 4. background-repeat: space;
    A imagem de fundo é repetida com espaços iguais entre as cópias.
    Se a imagem não couber perfeitamente, espaços extras são adicionados (sem cortar ou redimensionar a imagem).
    📌 Exemplo:
    Se 3 imagens cabem e sobra espaço, ele distribui esse espaço igualmente entre elas.
    
    ✅ 5. background-repeat: round;
    A imagem de fundo é redimensionada automaticamente para que caiba perfeitamente no container sem sobras.
    A imagem se repete, mas com o tamanho ajustado para encaixar certinho no espaço total.
    📌 Exemplo:
    Se a imagem tem 60px e o container tem 200px, ele pode redimensionar para 50px para repetir 4 vezes sem corte.

    ✅ 6. background-repeat: no-repeat;
    A imagem aparece só uma vez (sem repetição).
    É o mais comum quando se usa imagens decorativas únicas (ex: ícones, logos, fotos de fundo com cover).
    
    */

/* background-attachment, background-origin, background-blend-mode

    Background-Attachment
🎯 Essa propriedade define como a imagem de fundo se comporta em relação à rolagem da página ou de um elemento com overflow.

✅ Explicações claras:
Valor	        O que faz
scroll(padrão)	A imagem de fundo rola junto com o conteúdo da página ou da div.
fixed	        A imagem de fundo fica fixa na tela (na viewport), mesmo que o conteúdo role. Dá um efeito tipo "parallax".
local	        A imagem de fundo rola junto com o conteúdo da própria div. Útil em overflow: auto com rolagem interna.

### 🔵 `fixed`
- A imagem **fica fixa na tela**, como se estivesse colada no fundo da janela.
- Mesmo rolando a página ou o conteúdo da `div`, a imagem **não se move**.
- Isso só funciona bem se o elemento **não estiver dentro de um elemento com `transform`, `perspective`, ou `filter` aplicado**.

### 🔵 `scroll`
- A imagem de fundo **rola junto com a página**, é o comportamento **padrão**.
- Se você rolar a página ou o conteúdo da `div`, a imagem se moverá com ele.

### 🔵 `local`
- A imagem **rola junto com o conteúdo da `div`**.
- Funciona apenas se a `div` **tem rolagem interna** (`overflow: auto` e bastante texto).
- A imagem **fica fixa no conteúdo**, e se movimenta ao rolar o conteúdo da própria `div`.

Exemplo: 
    body{ height: 200vh; }
        .exemplo{
            width: 300px;
            height: 300px;
            background-image: url('../img/nave_considero_realista.jpg');
            background-size: cover;
            border: 1px solid red;
            overflow: auto; -> overflow: auto; permite rolagem interna se o conteúdo for maior que a div }
        #fixed{ background-attachment: fixed; }
        #scroll{ background-attachment: scroll; }
        #local{ background-attachment: local; }


🎯 background-origin: Define onde o plano de fundo (imagem, cor) começa a ser desenhado dentro do elemento.

✅ Explicações claras:
Valor	        Explicação
padding-box     O background começa no início da área de padding (não cobre a borda).
border-box      O background começa no início da borda e cobre toda a área do elemento.
content-box     O background cobre apenas a área de conteúdo, ignorando padding e borda.

🔵 padding-box
    Significado: O fundo começa a ser desenhado a partir da área de padding.
    Cobre: A área de conteúdo + padding.
    Não cobre: As bordas.
    Uso comum: Quando você quer que o fundo respeite a distância da borda, sem preenchê-la.

📌 Exemplo visual:
Imagine uma caixa com bordas, padding e conteúdo. O fundo vai cobrir tudo exceto a borda.

🔵 border-box
    Significado: O fundo começa a ser desenhado desde a borda externa do elemento.
    Cobre: Conteúdo + padding + borda.
    Uso comum: Quando você quer que o fundo se estenda por toda a área do elemento, inclusive a borda.

📌 Exemplo visual:
A imagem ou cor de fundo vai ficar debaixo da borda também, ocupando toda a caixa do elemento.

🔵 content-box
    Significado: O fundo é desenhado somente dentro da área de conteúdo.
    Cobre: Apenas a área de conteúdo.
    Não cobre: O padding nem a borda.
    Uso comum: Quando você quer que o fundo fique restrito ao conteúdo, sem ocupar espaço extra.

📌 Exemplo visual:
A imagem de fundo fica "encaixada" só no meio da caixa, sem tocar nas laterais (padding ou borda).

Exemplo:
.exemplo{
    width: 300px;
    height: 300px;
    background-image: url('../img/nave_considero_realista.jpg');
    background-size: 100% 100%;
    background-repeat: no-repeat;
    border: 15px dashed palegreen;
    padding: 30px;
}
    
    #padding-box{
        background-origin: padding-box;
    }
    
    #border-box{
        background-origin: border-box;
    }
    
    #content-box{
        background-origin: content-box;
    }

🎯 background-clip: Controla até onde o plano de fundo pode se estender ou ser visível.

✅ Explicações claras:
Valor	        Onde o fundo termina
border-box	    Até a borda
padding-box	    Até o padding
content-box	    Até o conteúdo

🔵 border-box
    Significado: O fundo vai até o limite externo da borda.
    O que cobre: Conteúdo + padding + borda.
    Efeito: A imagem ou cor de fundo aparece por baixo da borda.
    Uso comum: Para fazer com que o fundo ocupe toda a área do elemento, inclusive onde há borda.

📌 Dica: É o valor padrão da maioria dos navegadores.

🔵 padding-box
    Significado: O fundo termina no final do padding.
    O que cobre: Conteúdo + padding.
    Não cobre: A borda (fica transparente ou da cor da borda).
    Uso comum: Quando você quer que o fundo fique dentro da borda, sem ultrapassá-la.

📌 Dica: Muito usado com elementos que têm bordas estilizadas, para não interferir no visual da borda.

🔵 content-box
    Significado: O fundo só é visível na área de conteúdo.
    O que cobre: Apenas a área onde o conteúdo (texto, imagens) está.
    Não cobre: Nem o padding, nem a borda.
    Uso comum: Quando você quer o fundo restrito ao conteúdo, como em caixas com muito padding, mas sem interferência visual no fundo.

🧠 Resumo com metáfora:
Pense no fundo como uma imagem que você cola dentro de uma caixa:
    background-origin: onde você posiciona a imagem (início).
    background-clip: até onde você deixa ela visível (fim).


.exemplo {
        width: 300px;
        height: 300px;
        border: 15px dashed palegreen;
        color: white;
        padding: 30px;
        font-size: 35px;
        font-weight: 900;
        background-color: palevioletred;
        
        background-image: repeating-linear-gradient(45deg, transparent 5px, hsla(197, 62%, 11%, 0.5) 5px, hsla(197, 62%, 11%, 0.5) 10px,
        hsla(5, 53%, 63%, 0) 10px, hsla(5, 53%, 63%, 0) 35px, hsla(5, 53%, 63%, 0.5) 35px, hsla(5, 53%, 63%, 0.5) 40px,
        hsla(197, 62%, 11%, 0.5) 40px, hsla(197, 62%, 11%, 0.5) 50px, hsla(197, 62%, 11%, 0) 50px, hsla(197, 62%, 11%, 0) 60px,
    hsla(5, 53%, 63%, 0.5) 60px, hsla(5, 53%, 63%, 0.5) 70px, hsla(35, 91%, 65%, 0.5) 70px, hsla(35, 91%, 65%, 0.5) 80px,
    hsla(35, 91%, 65%, 0) 80px, hsla(35, 91%, 65%, 0) 90px, hsla(5, 53%, 63%, 0.5) 90px, hsla(5, 53%, 63%, 0.5) 110px,
    hsla(5, 53%, 63%, 0) 110px, hsla(5, 53%, 63%, 0) 120px, hsla(197, 62%, 11%, 0.5) 120px, hsla(197, 62%, 11%, 0.5) 140px
    ),
    repeating-linear-gradient(135deg, transparent 5px, hsla(197, 62%, 11%, 0.5) 5px, hsla(197, 62%, 11%, 0.5) 10px,
    hsla(5, 53%, 63%, 0) 10px, hsla(5, 53%, 63%, 0) 35px, hsla(5, 53%, 63%, 0.5) 35px, hsla(5, 53%, 63%, 0.5) 40px,
    hsla(197, 62%, 11%, 0.5) 40px, hsla(197, 62%, 11%, 0.5) 50px, hsla(197, 62%, 11%, 0) 50px, hsla(197, 62%, 11%, 0) 60px,
    hsla(5, 53%, 63%, 0.5) 60px, hsla(5, 53%, 63%, 0.5) 70px, hsla(35, 91%, 65%, 0.5) 70px, hsla(35, 91%, 65%, 0.5) 80px,
    hsla(35, 91%, 65%, 0) 80px, hsla(35, 91%, 65%, 0) 90px, hsla(5, 53%, 63%, 0.5) 90px, hsla(5, 53%, 63%, 0.5) 110px,
    hsla(5, 53%, 63%, 0) 110px, hsla(5, 53%, 63%, 0) 140px, hsla(197, 62%, 11%, 0.5) 140px, hsla(197, 62%, 11%, 0.5) 160px
    );
}

#padding-box {
    background-clip: padding-box;
}

#border-box {
    background-clip: border-box;
}

#content-box {
    background-clip: content-box;
}

#text {
    -webkit-background-clip: text;
    color: transparent;
    border: 5px solid black;
    background-clip: text;
}

🎯 background-blend-mode é uma mesclagem dos fundos de um elemento.

🎨 Valores comuns do background-blend-mode:
| Valor                                      | Efeito de mesclagem                                                |
| ------------------------------------------ | ------------------------------------------------------------------ |
| `normal`                                   | Sem mesclagem (padrão)                                             |
| `multiply`                                 | Escurece combinando as cores (como misturar tinta)                 |
| `screen`                                   | Clareia combinando cores (efeito de brilho)                        |
| `overlay`                                  | Combina `multiply` e `screen` (realce forte)                       |
| `darken`                                   | Usa a cor mais escura entre as camadas                             |
| `lighten`                                  | Usa a cor mais clara entre as camadas                              |
| `color-dodge`                              | Clareia as cores de base                                           |
| `color-burn`                               | Escurece com contraste                                             |
| `difference`                               | Subtrai a cor de fundo da camada de cima                           |
| `luminosity`, `hue`, `saturation`, `color` | Fazem mesclagens baseadas em propriedades da cor (mais artísticas) |

.exemplo{
    width: 300px;
    height: 300px;
    border: 15px dashed palegreen;
    color: white;
    padding: 30px;
    font-size: 35px;
    font-weight: 900;
    background-color: orange;
    background-image: url(../img/nave_considero_realista.jpg);
    background-blend-mode: multiply;
}
*/

/* background

🎯 A propriedade background é shorthand (abreviada) e aceita múltiplos valores, mas a ordem importa!

Por isso, é bom organizar assim:
    background: [color] [image] [position/size] [repeat] [attachment] [origin] [clip];

Exemplo
    .exemplo{
        width: 300px;
    height: 300px;
    border: 15px dashed palegreen;
    color: white;
    padding: 30px;
    font-size: 35px;
    font-weight: 900;
    
    background: 
    url(../img/nave_considero_realista.jpg) -> img
    top center / 200px 200px -> position / size
    no-repeat -> repeat 
    fixed -> attachment 
    padding-box -> origin 
    content-box -> clip 
    red -> color 
    ;
}

🧠 Explicação dos componentes:
| Parte                                     | O que faz                                                                              |
| ----------------------------------------- | -------------------------------------------------------------------------------------- |
| `url(../img/nave_considero_realista.jpg)` | Define a **imagem de fundo**.                                                          |
| `top center`                              | Alinha a imagem no **topo central** do elemento.                                       |
| `/ 200px 200px`                           | Redimensiona a imagem para **200x200px**.                                              |
| `no-repeat`                               | A imagem **não será repetida**.                                                        |
| `fixed`                                   | A imagem **fica fixa** no viewport (não rola junto com a página).                      |
| `padding-box`                             | Define que a **origem da imagem** começa no **padding** (`background-origin`).         |
| `content-box`                             | Define até onde o fundo é visível: **somente a área de conteúdo** (`background-clip`). |
| `red`                                     | Define a **cor de fundo padrão** do elemento.                                          |

*/

/* border

border-width: 10px; -> define o grosura da borda vc popde coloca a grosura para lados especifico e pode escrever também em ingles para determina a grosura como medium
border-style: double; -> define o estilo da borda tem varios não muitos vc pode colocar bolinhas duas linhas quadrados. 
border-color: aqua; -> vc pode definir a cor da borda vc pode colocar uma cor para cada lado.

border: 10px double aqua; -> vc pode definir todas a grosura o tipo e cor da borda nesta mesma sequencia. 

vc pode definir diretamente para qual lado da borda vc quer editar
border-top: ;
border-width: ;
border-bottom: ;
border-left: ;

border-radius: 20px -> ele aredonda as bordas não deixa quadrado.
vc pode deixar ovau usando a barra lateral border-radius: 50px/100px.
border-radius: 50% vc faz uma circulo, só toma cuidado com a largura e altura para não deforma o circulo. 

*/

/* border-image-source, border-image-slice, border-image-width

 A propriedade **border-image-source** define a imagem ou gradiente que será usada como imagem de borda de um elemento.
 O **border-image-slice** controla como a imagem da borda é “cortada” (fatiada) para ser distribuída nas partes da borda do elemento.


🎯 border-image-source
    border-image-source: linear-gradient(red, blue) -> vc pode colcar uma cor também.
    border-image-source: url(../img/nave.png); -> ele colca em cada canto da borda a imagen que vc selecionar.

🎯 border-image-slice
    Define em quantas partes a imagem será dividida para formar as bordas do elemento.
    A imagem é dividida como uma grade 3x3:
    ╔═══╦═════╦═══╗
    ║ 1 ║  2  ║ 3 ║
    ╠═══╬═════╬═══╣
    ║ 4 ║  5  ║ 6 ║
    ╠═══╬═════╬═══╣
    ║ 7 ║  8  ║ 9 ║
    ╚═══╩═════╩═══╝

    ╔═════╦═════╦═════╗
    ║  1  ║  2  ║  3  ║
    ║⭐R ║ ⭐Y  ║ ⭐R ║
    ╠═════╬═════╬═════╣
    ║  4  ║  5  ║  6  ║
    ║⭐Y ║ ⭐B  ║ ⭐Y ║
    ╠═════╬═════╬═════╣
    ║  7  ║  8  ║  9  ║
    ║⭐R ║ ⭐Y  ║ ⭐R ║
    ╚═════╩═════╩═════╝
    Vermelho (⭐R): nos cantos (1, 3, 7, 9)
    Amarelo (⭐Y): nas laterais (2, 4, 6, 8)
    Azul (⭐B): no centro (5)

    Quando vc usa border-image-slice ele faz um gride que a parte vermelha fica nas pontas amarelo nas lateras e azul no meio.

    ✅ Exemplo:
    .exemplo{
        background-color: black;
        width: 200px;
        height: 200px;
        border: 30px solid;
    }
    
    #exemplo-1{
        border-image-source: url(../img/desenho\ para\ estudo.png);
        border-image-repeat: repeat;
        border-image-slice: 169;
    }

🎯 border-image-width: 10px;

    vc define o tamanho da borda. 
                        top  width  bottom  left
    border-image-width: 10px 20px   30px    40px;

    vc pode definir diretamente para qual lado da borda vc quer editar o tamanha
    border-top: ;
    border-width: ;
    border-bottom: ;
    border-left: ;
*/

/* border-image-repeat, border-image-outset

🎯 border-image-repeat 
    ele controla como a imagem vai se corporrta com a mudanaça de tamanho da div dentro da borda. 

    border-image-repeat: repeat; 
        A imagem da borda será repetida quantas vezes for necessário ao longo da borda.
        Se a imagem não couber perfeitamente, ela será cortada no final.
    border-image-repeat: round; 
        A imagem será repetida, mas o navegador ajustará levemente o tamanho da imagem 
        para que ela se encaixe perfeitamente na borda, sem cortes.
    border-image-repeat: stretch;
        A imagem será esticada (deformada) para preencher todo o espaço da borda sem repetição. 
    border-image-repeat: space;
       A imagem será repetida, mas não será cortada nem esticada. Se não couber perfeitamente,
        o navegador distribuirá espaços entre as imagens repetidas para preencher a borda.

    ✅ Definir valores diferentes para cada lado:
    Você pode definir dois valores: o primeiro vale para horizontal (esquerda e direita) e o segundo para vertical (superior e inferior).
    
        border-image-repeat: repeat space; 

    ✅ Exemplos:
    border-image-repeat: repeat;   repete e corta se sobrar 
    border-image-repeat: round;    repete e ajusta o tamanho da imagem 
    border-image-repeat: stretch;  estica a imagem
    border-image-repeat: space;    repete e adiciona espaços se sobrar espaço

🎯 border-image-outset
    A propriedade border-image-outset define o quanto a imagem da borda deve "sair" 
    para fora da caixa do elemento (ou seja, afastar da borda real do conteúdo).

    ✅ O que ela faz:
    "Empurra" a imagem da borda para fora do elemento, além da largura normal da borda.
    Isso faz a imagem ocupar mais espaço fora do elemento.

    border-image-outset: 10;

    ✅ Definir valores diferentes para cada lado:
    border-image-outset: 1 2 1 2; Top, Right, Bottom, Left


*/

/* font-family, @font-face, font-weight

✅  Forma mais simples de definir uma fonte:
        
        font-family: sans-serif;

✅ Usar uma fonte personalizada baixada:
    Quando você baixa uma fonte (por exemplo, .ttf, .woff, etc.), é necessário usar 
    @font-face para carregá-la:
        @font-face {
        font-family: "Roboto";
        src: url("fonts/Roboto-Regular.ttf"); Caminho para o arquivo
        }
        * {
        font-family: "Roboto";
        }
    
✅  Retira e colocar em negrito a fonte.
    A propriedade font-weight controla a espessura (peso) da fonte.
        font-weight: normal;   Fonte padrão, sem negrito
        font-weight: bold;     Negrito

    Você também pode usar valores numéricos para mais controle:
        font-weight: 100;   Bem fina
        font-weight: 400;   Normal 
        font-weight: 700;   Negrito 
        font-weight: 900;   Extra negrito 

*/

/* @import url(), Usar <link> no HTML (head), Melhor estratégia
✅ @import url() – Importar fonte do Google Fonts
Você pode importar fontes diretamente no seu CSS usando @import:

@import url('https://fonts.googleapis.com/css2?family=Roboto:ital,wght@0,100..900;1,100..900&display=swap');
*{
    font-family: Roboto;
}

✅ Usar <link> no HTML (head) 
Outra forma de usar Google Fonts é colocando um <link> dentro da tag <head> do seu HTML:

<link href="https://fonts.googleapis.com/css2?family=Roboto:wght@100..900&display=swap" rel="stylesheet">
Depois, use a fonte no CSS normalmente:
*{
    font-family: Roboto;
        }

✅ Melhor estratégia: usar um global.css
Para manter seu projeto organizado e fácil de manter, a melhor prática é:
1.Criar um arquivo global.css ou reset.css.
2.Colocar nele as configurações globais, como:
Importações de fontes
Cores principais
Reset de margens e paddings
Fontes padrão

Exemplo – global.css:
@import url('https://fonts.googleapis.com/css2?family=Roboto:wght@100..900&display=swap');
* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
    font-family: 'Roboto', sans-serif;
}

Depois, no CSS principal:
@import url('./global.css');
Aqui vai o resto do seu estilo

✅ Vantagens:
Código mais limpo e organizado.
Mais fácil de manter e reutilizar.
Rápido de alterar o visual de todo o site em um único lugar.

@import url("../assets/global.css");
*/

/* font-size, font-style, font-weight

🎯 Tamanhos de fonte em CSS

    ✅ Em pixels (valor absoluto)
            #tamanho-px {
                font-size: 20px;
            }

        Define o tamanho da fonte em pixels.
        Valor fixo, independente do tamanho do navegador ou dispositivo.

    ✅ Tamanhos pré-definidos (palavras-chave)
            #xx-small {
            font-size: xx-small;
            }
            #x-small {
            font-size: x-small;
            }
            #small {
            font-size: small;
            }
            #medium {
            font-size: medium;
            }
            #large {
            font-size: large;
            }
        Ordem dos tamanhos (do menor para o maior):
            xx-small < x-small < small < medium < large < x-large < xx-large

🎯 font-style – Estilo da fonte
    A propriedade font-style define o estilo da letra, como normal, itálico ou oblíquo.

    ✅ Exemplos:
            #normal{
                font-style: normal;
            }
        Usa a forma padrão da fonte (sem inclinação).

            #italic{
                font-style: italic;
            }
        Deixa a fonte inclinada, usando uma versão itálica real da fonte (se existir).
        
            #oblique{
                font-style: oblique;
            }
        Também inclina a fonte, mas de forma artificial (simula um itálico).
        Visualmente, parece com italic, mas é menos refinado.

🎯 font-weight – Peso da fonte (negrito)
    Essa propriedade controla se o texto será mais fino, normal ou mais espesso (como o negrito).

    ✅ Exemplos básicos:
            #normal {
            font-weight: normal; ou 400
            }
        Usa o peso padrão da fonte, geralmente 400.
            #bold {
            font-weight: bold; ou 700
            }
        Deixa o texto negrito.
    
    ✅ Você também pode usar valores numéricos:
        font-weight: 100;   Extra fino
        font-weight: 300;   Fino 
        font-weight: 400;   Normal 
        font-weight: 500;   Um pouco mais grosso 
        font-weight: 700;   Negrito 
        font-weight: 900;   Extra negrito 

*/

/* font-variant , line-height

🎯 font-variant – Capitalização estilizada
    ✅ exemplos:
        #normal {
        font-variant: small-caps;
        font-weight: bold;
        }
    font-variant: small-caps: transforma as letras minúsculas em maiúsculas pequenas (versaletes), mas mantém as letras que já estavam em maiúsculas com o tamanho normal.
    💡 Dica:
        small-caps é muito usado em:
            Títulos elegantes
            Cabeçalhos de capítulos
            Subtítulos formais

🎯 line-height

    ele determina o espaçamento entre as linhas do texto
    ✅ exemplos:
        p{
            line-height: 1.5;
        }



        */

/* font – Propriedade abreviada de fonte
A propriedade abreviada font permite definir várias propriedades de fonte ao mesmo tempo:

✅ Sintaxe completa da propriedade abreviada:
    font: [style] [variant] [weight] [size]/[line-height] [family];

        style: normal, italic, oblique
        variant: normal, small-caps
        weight: normal, bold, 100–900
        size: obrigatória (ex: 16px)
        line-height: opcional (ex: /1.5)
        family: obrigatória (ex: Arial, sans-serif)

✅ Seu primeiro exemplo:
    p {
    font: 20px Arial, sans-serif;
    }
        Aqui você está definindo:
            font-size: 20px
            font-family: Arial, sans-serif
        Os valores que não foram declarados (como font-style, font-weight, etc.) assumem o valor padrão: normal.

✅ Seu segundo exemplo:
    h1 {
    font: italic small-caps bold 24px/2 Georgia, serif;
    }
        italic:         estilo da fonte
        small-caps:     versalete (minúsculas viram maiúsculas pequenas)
        bold:           negrito
        24px:           tamanho da fonte
        /2:             altura da linha (line-height: 2)
        Georgia, serif: família da fonte (com fallback)
    
    📌 Essa linha é equivalente a escrever:
        h1 {
            font-style: italic;
            font-variant: small-caps;
            font-weight: bold;
            font-size: 24px;
            line-height: 2;
            font-family: Georgia, serif;
        }
⚠️ Atenção:
    Os valores obrigatórios são: font-size e font-family.
    Se você esquecer um deles, o CSS não aplicará a regra.


    */

/* text-align, text-decoration, ext-indent, letter-spacing, word-spacing

🎯 text-align – Alinhamento do texto
   A propriedade text-align controla como o texto será alinhado horizontalmente dentro de um elemento (como um parágrafo, div, título, etc.).
    
    text-align: left; Alinha o texto à esquerda (padrão em português)
    text-align: right; Alinha o texto à direita
    text-align: center; Centraliza o texto
    text-align: justify Justifica o texto como em documentos (alinhas as margens esquerda e direita)

    ✅ Exemplo prático: 
    HTML: 
        <div class="exemplo">
            <p>Esse texto está centralizado com text-align: center.</p>
        </div>
    CSS:
        .exemplo{
            width: 370px;
            border: 1px solid black;
        }
        p{
            padding: 10px;
            background-color: lavender;
            text-align: center; -> ele esta alinhado ao centro
        }

🎯 text-decoration

    🎯 text-decoration-line - Onde a linha será aplicada - Ele decide na onde a linha vai ficar.

        text-decoration-line: underline;     Linha abaixo do texto
        text-decoration-line: line-through;  Linha no meio do texto
        text-decoration-line: overline;      Linha acima do texto
        text-decoration-line: none;          Remove qualquer linha

    🎯 text-decoration-style e o estilo da linha se ela vai ser pontinhada ou em ondas.

        text-decoration-style: solid ;   Linha reta e contínua (padrão)
        text-decoration-style: double;   Duas linhas paralelas
        text-decoration-style:dotted;    Linha pontilhada
        text-decoration-style: dashed;   Linha tracejada
        text-decoration-style:wavy;      Linha em ondas

    🎯 text-decoration-color – Cor da linha
        Define a cor da linha decorativa, sem afetar a cor do texto:
            text-decoration-color: red;

    🎯 text-decoration-thickness – Espessura da linha
        Define a grossura da linha:
            text-decoration-thickness: 1px;

        ✅ Exemplo completo:
            p {
            text-decoration-line: underline;
            text-decoration-style: wavy;
            text-decoration-color: red;
            text-decoration-thickness: 2px;
            }
    
    🎯 text-decoration – Forma abreviada (shorthand)
        Você pode condensar tudo isso em uma única linha:
            text-decoration: underline solid red 1px; 
        
        Ordem dos valores (recomendada):
            text-decoration: [line] [style] [color] [thickness];

    💡 Dica:
    text-decoration é muito usado em links, títulos decorados e efeitos visuais em botões.
    Para remover a linha de um link.

🎯 text-indent vc conseque com ele da um espaçamento da borda.

    ✅ Exemplo completo:
        p{
            text-indent: -5px;
        }

🎯 letter-spacing vc conseque colocar um espaçamento entre as letras.

    ✅ Exemplo completo:
        p{
            letter-spacing: 10px;
        }

🎯 word-spacing vc conseque colocar um espaçamento e cada palavra.

    ✅ Exemplo completo:
        p{
            word-spacing: 10px;
        }


*/

/* white-space, word-wrap, writing-mode, word-break, text-overflow

🎯 white-space – Controle da quebra e espaço no texto
    A propriedade white-space define como o navegador lida com espaços em branco, 
    quebras de linha e formatação do texto no HTML.
    
    white-space: nowrap;
        ❌ Não permite quebra de linha — todo o conteúdo fica em uma única linha, mesmo que ultrapasse a largura do container.
        Usa-se muito em botões, cabeçalhos ou labels.

    white-space: pre; 
        ✅ Preserva todos os espaços e quebras de linha exatamente como estão no HTML.
        Funciona como a tag <pre> do HTML.
        Ideal para exibir código ou textos formatados manualmente.
    
    white-space: pre-line;
        ✅ Preserva quebras de linha do HTML.
        ❌ Ignora múltiplos espaços.
        Útil para formatar textos com parágrafos, mantendo quebras.

    white-space: pre-wrap;
        ✅ Preserva todos os espaços e quebras de linha.
        ✅ Permite quebra automática de linha quando o texto chega ao final do container.
        Muito usado quando você quer manter a formatação, mas ainda assim deixar o texto responsivo.
    
    white-space: break-spaces;
        Igual ao pre-wrap, mas também preserva os espaços extras no final da linha.
        Suporte mais recente (funciona em navegadores modernos).
        Ideal para textos com alinhamento ou formatação visual especial.
    
🎯 word-wrap (ou overflow-wrap)
    A propriedade word-wrap controla se uma palavra muito longa pode ser quebrada e ir
    para a próxima linha quando ultrapassar a largura do container.
    
    ✅ Sintaxe:
        word-wrap: normal;       (ou overflow-wrap: normal)
        word-wrap: break-word;   (ou overflow-wrap: break-word)

    ✅ Significado:
🔹 word-wrap: normal;
    O texto não será quebrado no meio de uma palavra.
    Se a palavra for muito longa, ela transborda a caixa.

🔹 word-wrap: break-word;
    Permite quebrar palavras longas automaticamente.
    Evita que a palavra ultrapasse a largura da div.
  
    
🎯 word-break – Quebra de palavras
    A propriedade word-break controla a quebra de palavras quando elas atingem o final
    de uma linha.

    ✅ Sintaxe:
        word-break: normal;
        word-break: break-all;
        word-break: keep-all;

    ✅ Explicação:
🔹word-break: normal;
    Quebra as linhas apenas entre palavras, de forma natural.
    Palavras longas não são quebradas no meio.

🔹word-break: break-all;
    Permite quebrar em qualquer ponto da palavra, se necessário.
    Muito útil para idiomas sem espaçamento entre palavras (como chinês ou japonês), mas também usado para ajustar palavras longas em pequenos espaços.

🔹word-break: keep-all;
    Evita a quebra de palavras.
    Funciona principalmente em idiomas asiáticos, mantendo as palavras completas.

🎯 writing-mode – Define a orientação e o fluxo do texto
    A propriedade writing-mode define a direção na qual o texto é escrito: horizontal ou 
    vertical, e também de onde ele começa.

    ✅ Sintaxe:
        writing-mode: horizontal-tb; padrão 
        writing-mode: vertical-rl;
        writing-mode: vertical-lr;

    ✅ Valores mais usados:
        Valor	Descrição
        🔹horizontal-tb	    Horizontal, da esquerda para a direita e de cima para baixo (modo padrão em português e inglês).
        🔹vertical-rl	    Vertical, de cima para baixo e colunas da direita para a esquerda (comum em japonês, chinês tradicional).
        🔹vertical-lr	    Vertical, de cima para baixo e colunas da esquerda para a direita (menos comum, mas útil em alguns contextos).

🎯 text-overflow 
    A propriedade text-overflow define como o texto que ultrapassa o tamanho da caixa será exibido.
    
    ⚠️ Importante: Para funcionar corretamente, é obrigatório usar junto com:
        overflow: hidden;
        white-space: nowrap;

    ✅ Sintaxe:
        text-overflow: clip;
        text-overflow: ellipsis;

    ✅ Valores:
        | Valor      | Descrição                                                                           
        | ---------- | ----------------------------------------------------------------------------------- 
        | `clip`     | **Corta** o texto que ultrapassa o limite da caixa **sem adicionar nada** visual.   
        | `ellipsis` | Adiciona **três pontinhos (...)** no final do texto, indicando que ele foi cortado. 

*/

/* box-shadow, filter: drop-shadow, text-shadow

🎯 box-shadow
    Adiciona sombra ao elemento (como um bloco).
    Essa sombra pode ficar fora ou dentro da caixa (quando com inset).

    ✅ Sintaxe:
        box-shadow: offset-x offset-y blur-radius spread-radius color;
        | Parâmetro          | Descrição                           |
        | ------------------ | ----------------------------------- |
        | `offset-x`         | Deslocamento horizontal da sombra   |
        | `offset-y`         | Deslocamento vertical da sombra     |
        | `blur-radius`      | Suavização/borrão da sombra         |
        | `spread-radius`    | Tamanho da expansão da sombra       |
        | `color`            | Cor da sombra                       |
        | `inset` (opcional) | Coloca a sombra **dentro** da caixa |

    ✅ Exemplo:
        box-shadow: 10px 10px 20px -7px red;
        ➕ Uma sombra vermelha com deslocamento e suavização
        ➖ Espalhamento negativo deixa ela mais próxima do elemento

🎯 filter: drop-shadow
        Adiciona uma sombra em volta do conteúdo renderizado, como imagens com fundo transparente ou SVGs.
        Diferente do box-shadow, ela segue a forma do conteúdo, não a da caixa.

    ✅ Exemplo:
        filter: drop-shadow(10px 10px 5px gray);
        ➕ Uma sombra cinza deslocada ao redor do conteúdo.

🎯 text-shadow 
    A propriedade text-shadow adiciona sombras ao redor do texto.

    ✅ Sintaxe:
        text-shadow: offset-x offset-y blur-radius color;
        | Parâmetro     | Descrição                                         |
        | ------------- | ------------------------------------------------- |
        | `offset-x`    | Distância horizontal da sombra (esquerda/direita) |
        | `offset-y`    | Distância vertical da sombra (cima/baixo)         |
        | `blur-radius` | Borrão da sombra (mais suave ou mais sólida)      |
        | `color`       | Cor da sombra                                     |

    ✅ Exemplo:
        h2 {
            color: deeppink;
            font-size: 40px;
            text-align: center;
            text-shadow: 10px 10px 5px purple;
        }
        Esse exemplo cria uma sombra roxa deslocada 10px à direita e 10px para baixo do texto, com um leve borrado de 5px.
    
*/

/* opacity, overflow

🎯 opacity – Transparência do elemento
    A propriedade opacity controla a transparência de um elemento HTML (texto, imagem, caixa, botão etc).
    Opacity vc conseque retira o brinho.

    ✅ Sintaxe:
        opacity: valor;

    O valor vai de 0 até 1:
        0 = totalmente transparente (invisível)
        1 = totalmente opaco (visível)
        
        vc conseque coloca de 0.1 ate 0.9 o maximo 1.0.
        Exemplo intermediário: opacity: 0.5; → 50% visível

    🧠 Dica:
        Se quiser aplicar transparência somente no fundo, sem afetar o texto dentro da caixa, use cores com rgba:
            background-color: rgba(0, 0, 0, 0.5); fundo preto com 50% de opacidade
        
        Porque opacity afeta todo o elemento, inclusive o conteúdo interno dele.

🎯 overflow – Controla o conteúdo que ultrapassa os limites da caixa
    A propriedade overflow determina como o navegador deve tratar o conteúdo que ultrapassa as dimensões do elemento (largura ou altura).

    ✅ Valores possíveis:
        overflow: visible;   (padrão) o conteúdo extra é exibido fora da caixa
        overflow: hidden;    o conteúdo extra é cortado e não aparece
        overflow: scroll;    adiciona barras de rolagem (horizontal e vertical), mesmo que não precise
        overflow: auto;      adiciona barras de rolagem só se necessário

    ✅ Aplicações:
        #hidden {
        overflow: hidden;    corta o conteúdo que ultrapassar
        }

        #scroll {
        overflow: scroll;    sempre mostra as barras de rolagem
        }

        #auto {
        overflow: auto;      mostra rolagem só quando necessário
        }

    ✅ Exemplo com rolagem horizontal apenas:
        #exemplo-1 {
        white-space: nowrap;     impede quebra de linha
        overflow-y: hidden;      oculta rolagem vertical
        overflow-x: scroll;      permite rolagem horizontal
        }

*/

/* Unidades de medidas absolutas

🎯 O que são unidades absolutas?

    São unidades fixas, que não mudam conforme o tamanho da tela ou preferências do 
    usuário. Ou seja:
        1 cm sempre será 1 cm (independente do dispositivo, em teoria).

    Por isso, são menos recomendadas para layouts responsivos — usamos mais as unidades 
    relativas como em, %, rem, vw, etc.

    |   Unidade   |   Nome                    |   Equivalência aproximada          |
    | ----------- | ------------------------- | ---------------------------------- |
    | `cm`        | Centímetro                | 1 cm = 37.8 px                     |
    | `mm`        | Milímetro                 | 1 mm = 3.78 px                     |
    | `Q`         | Quarter-millimeter (¼ mm) | 1 Q = 0.25 mm = 0.945 px           |
    | `in`        | Polegada (inch)           | 1 in = 2.54 cm = 96 px             |
    | `pc`        | Pica                      | 1 pc = 12 pt = 16 px               |
    | `pt`        | Ponto tipográfico (point) | 1 pt = 1/72 in = 1.33 px           |
    | `px`        | Pixel (ponto na tela)     | 1 px = 1/96 in (por padrão no CSS) |

🎯 Unidades relativas
    📏 O que são unidades relativas em CSS?

    Unidades relativas são medidas que se adaptam ao contexto onde estão sendo usadas.
    Ou seja, elas não têm um tamanho fixo — seu valor depende de outro elemento, como:
        o elemento pai
        o tamanho da fonte
        ou o tamanho da tela (viewport)

    ✅ Unidades Relativas MAIS USADAS
        | **Unidade** | **Nome**        | **Equivalência aproximada**                            |
        | ----------- | --------------- | ------------------------------------------------------ |
        | `%`         | Porcentagem     | Relativa ao valor do **elemento pai**                  |
        | `em`        | Element         | 1 em = **tamanho da fonte do elemento atual**          |
        | `rem`       | Root Element    | 1 rem = **tamanho da fonte do elemento raiz (`html`)** |
        | `vw`        | Viewport Width  | 1 vw = **1% da largura da viewport**                   |
        | `vh`        | Viewport Height | 1 vh = **1% da altura da viewport**                    |
    
    ⚙️ Unidades Relativas MENOS USADAS (mais específicas)
        | **Unidade** | **Nome**         | **Equivalência aproximada**                                |
        | ----------- | ---------------- | ---------------------------------------------------------- |
        | `vmin`      | Viewport Minimum | 1 vmin = **1% do menor valor entre `vw` e `vh`**           |
        | `vmax`      | Viewport Maximum | 1 vmax = **1% do maior valor entre `vw` e `vh`**           |
        | `ch`        | Character        | 1 ch = **largura do caractere “0” da fonte atual**         |
        | `ex`        | x-height         | 1 ex = **altura da letra “x” da fonte atual**              |
        | `lh`        | Line Height      | 1 lh = **altura da linha (line-height) do elemento atual** |

    🔍 Exemplos rápidos:
        | Unidade | Base de referência                  | Exemplo                                        |
        | ------- | ----------------------------------- | ---------------------------------------------- |
        | `%`     | Tamanho do elemento **pai**         | `width: 50%` → metade da largura do pai        |
        | `em`    | **Fonte do próprio elemento**       | `padding: 2em` → 2× o tamanho da própria fonte |
        | `rem`   | **Fonte do elemento raiz (`html`)** | `font-size: 1.5rem` → 1.5× a fonte do `html`   |
        | `vw`    | **Largura da tela (viewport)**      | `width: 100vw` → 100% da largura da tela       |
        | `vh`    | **Altura da tela (viewport)**       | `height: 100vh` → 100% da altura da tela       |

    ✅ Vantagens:
        Adaptam-se a diferentes telas (celular, tablet, desktop)
        Ajudam na criação de layouts responsivos
        Permitem que usuários ajustem o zoom ou tamanho da fonte sem quebrar o layout

*/

/* calc() 

Uma função do CSS. Ela permite realizar cálculos diretamente dentro das propriedades que aceitam medidas, 
como width, height, margin, padding, font-size e outras.

🛠️ O que posso usar dentro de calc()?
Você pode usar:
    Operadores: +, -, *, /
    Unidades mistas: px, %, em, rem, vh, vw, etc.

    ✅ Exemplo com soma: 
        padding: calc(1rem + 20px);
    ✅ Exemplo com divisão:
        width: calc(100vw / 3);

⚠️ Regras importantes:
    Sempre coloque espaços entre os números e os operadores:
        
    Correto
        width: calc(100% - 50px);

    Incorreto
        width: calc(100%-50px);


    */


    
div {
    padding: 10px;
}

.exemplo-1 {
    background-color: yellow;
    width: 300px;
    box-sizing: border-box;
}

.exemplo-2 {
    box-sizing: border-box;
    background-color: palevioletred;
    width: calc(100% - 30px);
}

/*
header{
    background-color: rgb(58, 58, 60);
    color: white;
    padding: 10px;
    border-radius: 15px;
}

h1{
    margin: 0;
    text-align: center;
}

nav .menu{
    display: flex;
    gap: 10px;
    list-style-type: none;
    margin-bottom: 10px;
}

nav ul{
    margin: 0;
}

nav a{
    text-decoration: none;
    color: white;
    background-color: rgb(72, 71, 74);
    padding: 10px;
    border-radius: 20px;
}

nav a:hover{
    text-decoration: underline;
    text-decoration-thickness: 1px;
    background-color: rgb(101, 101, 105);
}

/* */